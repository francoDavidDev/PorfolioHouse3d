/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: WON (https://sketchfab.com/won1)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/fire-in-the-sky-06d903f5dc5245699adf38192f77fbb6
Title: ...Fire in the sky
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { a } from "@react-spring/three";
import { useFrame, useThree } from "@react-three/fiber";
import ciberpunk from "../3d/programmer.glb";

const Ciberpunk = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props
}) => {

    const islandRef = useRef();

    const { gl, viewport } = useThree();
  
    const { nodes, materials } = useGLTF(ciberpunk);  
    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;
  
    const handlePointerDown = (event) => {
      event.stopPropagation();
      event.preventDefault();
      setIsRotating(true);
  
      // Calculate the clientX based on whether it's a touch event or a mouse event
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;
  
      // Store the current clientX position for reference
      lastX.current = clientX;
    };
  
    // Handle pointer (mouse or touch) up event
    const handlePointerUp = (event) => {
      event.stopPropagation();
      event.preventDefault();
      setIsRotating(false);
    };
  
    const handlePointerMove = (e) => {
      e.stopPropagation();
      e.preventDefault();
  
  
      if (isRotating) {
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
  
        const delta = (clientX - lastX.current) / viewport.width;
  
        islandRef.current.rotation.y += delta * 0.01 * Math.PI;
  
        lastX.current = clientX;
        rotationSpeed.current = delta * 0.01 * Math.PI;
      }
    };
  
    const handleKeyDown = (e) => {
      if (e.key === "ArrowLeft") {
        islandRef.current.rotation.y += 0.01 * Math.PI;
      } else if (e.key === "ArrowRight") {
        if (!isRotating) setIsRotating(true);
        islandRef.current.rotation.y -= 0.01 * Math.PI;
      }
    };
  
    const handleKeyUp = (e) => {
      if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
        setIsRotating(false);
      }
    };
  
    useFrame(() => {
      if (!isRotating) {
        rotationSpeed.current *= dampingFactor;
  
        if (Math.abs(rotationSpeed.current) < 0.001) {
          rotationSpeed.current = 0;
        }
  
        islandRef.current.rotation.y += rotationSpeed.current;
      } else {
        const rotation = islandRef.current.rotation.y;
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
  
        // Set the current stage based on the island's orientation
        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
          default:
            setCurrentStage(null);
        }
      }
    });
  
    useEffect(() => {
      const canvas = gl.domElement;
      canvas.addEventListener("pointerdown", handlePointerDown);
      canvas.addEventListener("pointerup", handlePointerUp);
      canvas.addEventListener("pointermove", handlePointerMove);
  
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
  
      return () => {
        canvas.removeEventListener("pointerdown", handlePointerDown);
        canvas.removeEventListener("pointerup", handlePointerUp);
        canvas.removeEventListener("pointermove", handlePointerMove);
  
        document.removeEventListener("keydown", handleKeyDown);
        document.removeEventListener("keyup", handleKeyUp);
      };
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
  



    return (
      <a.group ref={islandRef} {...props}>
        <group rotation={[-Math.PI / 2, 0, 0]} >
          <group position={[0, 0.752, -0.086]} rotation={[1.263, 0, 0]} >
            <primitive object={nodes.my_rig_rootJoint}  />
            <skinnedMesh
              geometry={nodes.hair_0.geometry}
              material={materials.cloth}
              skeleton={nodes.hair_0.skeleton}
            />
            <skinnedMesh
              geometry={nodes.hair_1.geometry}
              material={materials.solidify}
              skeleton={nodes.hair_1.skeleton} 
            />
            <skinnedMesh
              geometry={nodes.me_0.geometry}
              material={materials.body}
              skeleton={nodes.me_0.skeleton} 
            />
            <skinnedMesh
              geometry={nodes.me_1.geometry}
              material={materials.solidify}
              skeleton={nodes.me_1.skeleton}
            />
            <skinnedMesh
              geometry={nodes.me002_0.geometry}
              material={materials.cloth}
              skeleton={nodes.me002_0.skeleton} 
            />
            <skinnedMesh
              geometry={nodes.me002_1.geometry}
              material={materials.solidify}
              skeleton={nodes.me002_1.skeleton}
            />
            <skinnedMesh
              geometry={nodes.kemeja_0.geometry}
              material={materials.cloth}
              skeleton={nodes.kemeja_0.skeleton}
            />
            <skinnedMesh
              geometry={nodes.kemeja_1.geometry}
              material={materials.solidify}
              skeleton={nodes.kemeja_1.skeleton}
            />
          </group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube005_0.geometry}
            material={materials.laptop_tex}
            position={[-0.033, -0.442, -0.467]}
            rotation={[2.378, 0, 0]}
            scale={0.149}
            
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.bool1185_0.geometry}
            material={materials.Material}
            position={[2.403, 0.752, -0.428]}
            rotation={[-0.464, 0.296, -0.932]}
            scale={0.106}
          />
        </group>
      </a.group>
    );
};

useGLTF.preload("/fire_in_the_sky.glb");
export default Ciberpunk;
